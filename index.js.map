{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"React\"","webpack:///./src/components/utils/escapeRegExp.ts","webpack:///./src/components/CurrencyInput.tsx","webpack:///./src/components/utils/index.ts","webpack:///./src/components/utils/formatValue.ts","webpack:///./src/components/utils/getSuffix.ts","webpack:///./src/example.tsx","webpack:///external \"ReactDOM\"","webpack:///./src/examples/Example1.tsx","webpack:///./src/components/utils/cleanValue.ts","webpack:///./src/components/utils/parseAbbrValue.ts","webpack:///./src/components/utils/removeSeparators.ts","webpack:///./src/components/utils/removeInvalidChars.ts","webpack:///./src/components/utils/fixedDecimalValue.ts","webpack:///./src/components/utils/getLocaleConfig.ts","webpack:///./src/components/utils/isNumber.ts","webpack:///./src/components/utils/padTrimValue.ts","webpack:///./src/examples/Example2.tsx","webpack:///(webpack)/buildin/module.js","webpack:///./node_modules/react-hot-loader/index.js","webpack:///./node_modules/react-hot-loader/dist/react-hot-loader.production.min.js","webpack:///./src/examples/Example3.tsx","webpack:///./src/examples/Example4.tsx","webpack:///./src/index.ts","webpack:///./src/examples/FormatValuesExample.tsx"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","React","escapeRegExp","stringToGoIntoTheRegex","replace","CurrencyInput","forwardRef","ref","allowDecimals","allowNegativeValue","id","className","customInput","decimalsLimit","defaultValue","disabled","userMaxLength","userValue","onValueChange","fixedDecimalLength","placeholder","decimalScale","prefix","suffix","intlConfig","step","min","max","disableGroupSeparators","disableAbbreviations","_decimalSeparator","_groupSeparator","onChange","onFocus","onBlur","onKeyDown","onKeyUp","props","Error","isNumber","localeConfig","useMemo","getLocaleConfig","decimalSeparator","groupSeparator","formatValueOptions","cleanValueOptions","formattedStateValue","undefined","formatValue","String","useState","stateValue","setStateValue","dirty","setDirty","cursor","setCursor","inputRef","useRef","processChange","selectionStart","valueOnly","cleanValue","length","formattedValue","useEffect","current","setSelectionRange","formattedPropsValue","inputProps","type","inputMode","event","fixedDecimals","fixedDecimalValue","newValue","padTrimValue","preventDefault","currentValue","parseFloat","fixedLength","includes","Number","split","toFixed","getSuffix","newCursor","CustomInput","displayName","options","_value","isNegative","RegExp","test","replaceDecimalSeparator","parts","Intl","NumberFormat","locale","currency","style","minimumFractionDigits","maximumFractionDigits","formatToParts","formatted","replaceParts","intlSuffix","includeDecimalSeparator","slice","decimals","match","join","reduce","prev","suffixReg","suffixMatch","render","document","getElementById","ReactDOM","Example1","errorMessage","setErrorMessage","setClassName","setValue","rawValue","setRawValue","href","htmlFor","isNaN","abbreviations","exec","prefixWithValue","preValue","withoutPrefix","concat","withoutSeparators","removeSeparators","withoutInvalidChars","removeInvalidChars","some","letter","toLowerCase","parsed","parseAbbrValue","includeNegative","int","trimmedDecimals","abbrValue","_decimalPlaces","valueLength","Math","pow","round","abbrMap","k","b","reg","digits","abbr","multiplier","separator","validChars","chars","defaultConfig","currencySymbol","curr","input","Example2","hot","webpackPolyfill","deprecate","paths","children","e","default","AppContainer","warnAboutHMRDisabled","console","error","Children","only","shouldWrapWithAppContainer","createElement","areComponentsEqual","setConfig","cold","configureComponent","Example3","setIntlConfig","config","target","map","JSON","stringify","reducer","state","fieldName","initialState","field1","validationClass","field2","Example4","useReducer","dispatch","handleOnValueChange","total","setPrefix","setGroupSeparator","setDecimalSeparator","setdisableGroupSeparators","handleTurnOffSeparatorChange","newDecimalSeparator","checked"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","module.exports = React;","/**\n * Escape regex char\n *\n * See: https://stackoverflow.com/questions/17885855/use-dynamic-variable-string-as-regex-pattern-in-javascript\n */\nexport const escapeRegExp = (stringToGoIntoTheRegex: string): string => {\n  return stringToGoIntoTheRegex.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n};\n","import React, { FC, useState, useEffect, useRef, forwardRef, useMemo } from 'react';\nimport { CurrencyInputProps } from './CurrencyInputProps';\nimport {\n  isNumber,\n  cleanValue,\n  fixedDecimalValue,\n  formatValue,\n  getLocaleConfig,\n  padTrimValue,\n  CleanValueOptions,\n  getSuffix,\n} from './utils';\n\nexport const CurrencyInput: FC<CurrencyInputProps> = forwardRef<\n  HTMLInputElement,\n  CurrencyInputProps\n>(\n  (\n    {\n      allowDecimals = true,\n      allowNegativeValue = true,\n      id,\n      name,\n      className,\n      customInput,\n      decimalsLimit,\n      defaultValue,\n      disabled = false,\n      maxLength: userMaxLength,\n      value: userValue,\n      onValueChange,\n      fixedDecimalLength,\n      placeholder,\n      decimalScale,\n      prefix,\n      suffix,\n      intlConfig,\n      step,\n      min,\n      max,\n      disableGroupSeparators = false,\n      disableAbbreviations = false,\n      decimalSeparator: _decimalSeparator,\n      groupSeparator: _groupSeparator,\n      onChange,\n      onFocus,\n      onBlur,\n      onKeyDown,\n      onKeyUp,\n      ...props\n    }: CurrencyInputProps,\n    ref\n  ) => {\n    if (_decimalSeparator && _groupSeparator && _decimalSeparator === _groupSeparator) {\n      throw new Error('decimalSeparator cannot be the same as groupSeparator');\n    }\n\n    if (_decimalSeparator && isNumber(_decimalSeparator)) {\n      throw new Error('decimalSeparator cannot be a number');\n    }\n\n    if (_groupSeparator && isNumber(_groupSeparator)) {\n      throw new Error('groupSeparator cannot be a number');\n    }\n\n    const localeConfig = useMemo(() => getLocaleConfig(intlConfig), [intlConfig]);\n    const decimalSeparator = _decimalSeparator || localeConfig.decimalSeparator || '';\n    const groupSeparator = _groupSeparator || localeConfig.groupSeparator || '';\n\n    const formatValueOptions = {\n      decimalSeparator,\n      groupSeparator,\n      disableGroupSeparators,\n      intlConfig,\n      prefix,\n      suffix,\n    };\n\n    const cleanValueOptions: Partial<CleanValueOptions> = {\n      decimalSeparator,\n      groupSeparator,\n      allowDecimals,\n      decimalsLimit: decimalsLimit || fixedDecimalLength || 2,\n      allowNegativeValue,\n      disableAbbreviations,\n      prefix,\n    };\n\n    const formattedStateValue =\n      defaultValue !== undefined\n        ? formatValue({ ...formatValueOptions, decimalScale, value: String(defaultValue) })\n        : userValue !== undefined\n        ? formatValue({ ...formatValueOptions, decimalScale, value: String(userValue) })\n        : '';\n\n    const [stateValue, setStateValue] = useState(formattedStateValue);\n    const [dirty, setDirty] = useState(false);\n    const [cursor, setCursor] = useState(0);\n    const inputRef = ref || useRef<HTMLInputElement>(null);\n\n    const processChange = (value: string, selectionStart?: number | null): void => {\n      setDirty(true);\n      const valueOnly = cleanValue({ value, ...cleanValueOptions });\n\n      if (valueOnly === '') {\n        onValueChange && onValueChange(undefined, name);\n        setStateValue('');\n        return;\n      }\n\n      if (userMaxLength && valueOnly.replace(/-/g, '').length > userMaxLength) {\n        return;\n      }\n\n      if (valueOnly === '-' || valueOnly === decimalSeparator) {\n        onValueChange && onValueChange(undefined, name);\n        setStateValue(value);\n        return;\n      }\n\n      const formattedValue = formatValue({ value: valueOnly, ...formatValueOptions });\n\n      /* istanbul ignore next */\n      if (selectionStart !== undefined && selectionStart !== null) {\n        // Prevent cursor jumping\n        const cursor = selectionStart + (formattedValue.length - value.length) || 1;\n        setCursor(cursor);\n      }\n\n      setStateValue(formattedValue);\n\n      onValueChange && onValueChange(valueOnly, name);\n    };\n\n    const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n      const {\n        target: { value, selectionStart },\n      } = event;\n\n      processChange(value, selectionStart);\n\n      onChange && onChange(event);\n    };\n\n    const handleOnFocus = (event: React.FocusEvent<HTMLInputElement>): number => {\n      onFocus && onFocus(event);\n      return stateValue ? stateValue.length : 0;\n    };\n\n    const handleOnBlur = (event: React.FocusEvent<HTMLInputElement>): void => {\n      const {\n        target: { value },\n      } = event;\n\n      const valueOnly = cleanValue({ value, ...cleanValueOptions });\n\n      if (valueOnly === '-' || !valueOnly) {\n        setStateValue('');\n        onBlur && onBlur(event);\n        return;\n      }\n\n      const fixedDecimals = fixedDecimalValue(valueOnly, decimalSeparator, fixedDecimalLength);\n\n      // Add padding or trim value to decimalScale\n      const newValue = padTrimValue(\n        fixedDecimals,\n        decimalSeparator,\n        decimalScale !== undefined ? decimalScale : fixedDecimalLength\n      );\n\n      onValueChange && onValueChange(newValue, name);\n\n      const formattedValue = formatValue({\n        ...formatValueOptions,\n        value: newValue,\n      });\n\n      setStateValue(formattedValue);\n\n      onBlur && onBlur(event);\n    };\n\n    const handleOnKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n      const { key } = event;\n\n      if (step && (key === 'ArrowUp' || key === 'ArrowDown')) {\n        event.preventDefault();\n        setCursor(stateValue.length);\n\n        const currentValue =\n          parseFloat(\n            userValue !== undefined\n              ? String(userValue).replace(decimalSeparator, '.')\n              : cleanValue({ value: stateValue, ...cleanValueOptions })\n          ) || 0;\n        const newValue = key === 'ArrowUp' ? currentValue + step : currentValue - step;\n\n        if (min !== undefined && newValue < min) {\n          return;\n        }\n\n        if (max !== undefined && newValue > max) {\n          return;\n        }\n\n        const fixedLength = String(step).includes(decimalSeparator)\n          ? Number(String(step).split(decimalSeparator)[1].length)\n          : undefined;\n\n        processChange(\n          String(fixedLength ? newValue.toFixed(fixedLength) : newValue).replace(\n            '.',\n            decimalSeparator\n          )\n        );\n      }\n\n      onKeyDown && onKeyDown(event);\n    };\n\n    const handleOnKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\n      const {\n        key,\n        currentTarget: { selectionStart },\n      } = event;\n      if (key !== 'ArrowUp' && key !== 'ArrowDown' && stateValue !== '-') {\n        const suffix = getSuffix(stateValue, { groupSeparator, decimalSeparator });\n\n        if (suffix && selectionStart && selectionStart > stateValue.length - suffix.length) {\n          if (inputRef && typeof inputRef === 'object' && inputRef.current) {\n            const newCursor = stateValue.length - suffix.length;\n            inputRef.current.setSelectionRange(newCursor, newCursor);\n          }\n        }\n      }\n\n      onKeyUp && onKeyUp(event);\n    };\n\n    /* istanbul ignore next */\n    useEffect(() => {\n      // prevent cursor jumping if editing value\n      if (\n        dirty &&\n        stateValue !== '-' &&\n        inputRef &&\n        typeof inputRef === 'object' &&\n        inputRef.current\n      ) {\n        inputRef.current.setSelectionRange(cursor, cursor);\n      }\n    }, [cursor, inputRef, dirty]);\n\n    const formattedPropsValue =\n      userValue !== undefined\n        ? formatValue({\n            ...formatValueOptions,\n            decimalScale: dirty ? undefined : decimalScale,\n            value: String(userValue),\n          })\n        : undefined;\n\n    const inputProps: React.InputHTMLAttributes<HTMLInputElement> = {\n      type: 'text',\n      inputMode: 'decimal',\n      id,\n      name,\n      className,\n      onChange: handleOnChange,\n      onBlur: handleOnBlur,\n      onFocus: handleOnFocus,\n      onKeyDown: handleOnKeyDown,\n      onKeyUp: handleOnKeyUp,\n      placeholder,\n      disabled,\n      value:\n        formattedPropsValue !== undefined && stateValue !== '-' && stateValue !== decimalSeparator\n          ? formattedPropsValue\n          : stateValue,\n      ref: inputRef,\n      ...props,\n    };\n\n    if (customInput) {\n      const CustomInput = customInput;\n      return <CustomInput {...inputProps} />;\n    }\n\n    return <input {...inputProps} />;\n  }\n);\n\nCurrencyInput.displayName = 'CurrencyInput';\n\nexport default CurrencyInput;\n","export * from './cleanValue';\nexport * from './fixedDecimalValue';\nexport * from './formatValue';\nexport * from './getLocaleConfig';\nexport * from './getSuffix';\nexport * from './isNumber';\nexport * from './padTrimValue';\n","import { IntlConfig } from '../CurrencyInputProps';\nimport { escapeRegExp } from './escapeRegExp';\nimport { getSuffix } from './getSuffix';\n\nexport type FormatValueOptions = {\n  /**\n   * Value to format\n   */\n  value: string | undefined;\n\n  /**\n   * Decimal separator\n   *\n   * Default = '.'\n   */\n  decimalSeparator?: string;\n\n  /**\n   * Group separator\n   *\n   * Default = ','\n   */\n  groupSeparator?: string;\n\n  /**\n   * Turn off separators\n   *\n   * This will override Group separators\n   *\n   * Default = false\n   */\n  disableGroupSeparators?: boolean;\n\n  /**\n   * Intl locale currency config\n   */\n  intlConfig?: IntlConfig;\n\n  /**\n   * Specify decimal scale for padding/trimming\n   *\n   * Eg. 1.5 -> 1.50 or 1.234 -> 1.23\n   */\n  decimalScale?: number;\n\n  /**\n   * Prefix\n   */\n  prefix?: string;\n\n  /**\n   * Suffix\n   */\n  suffix?: string;\n};\n\n/**\n * Format value with decimal separator, group separator and prefix\n */\nexport const formatValue = (options: FormatValueOptions): string => {\n  const {\n    value: _value,\n    decimalSeparator,\n    intlConfig,\n    decimalScale,\n    prefix = '',\n    suffix = '',\n  } = options;\n\n  if (_value === '' || _value === undefined) {\n    return '';\n  }\n\n  if (_value === '-') {\n    return '-';\n  }\n\n  const isNegative = new RegExp(`^\\\\d?-${prefix ? `${escapeRegExp(prefix)}?` : ''}\\\\d`).test(\n    _value\n  );\n  const value =\n    decimalSeparator !== '.'\n      ? replaceDecimalSeparator(_value, decimalSeparator, isNegative)\n      : _value;\n\n  const numberFormatter = intlConfig\n    ? new Intl.NumberFormat(\n        intlConfig.locale,\n        intlConfig.currency\n          ? {\n              style: 'currency',\n              currency: intlConfig.currency,\n              minimumFractionDigits: decimalScale || 0,\n              maximumFractionDigits: 20,\n            }\n          : undefined\n      )\n    : new Intl.NumberFormat(undefined, {\n        minimumFractionDigits: decimalScale || 0,\n        maximumFractionDigits: 20,\n      });\n\n  const parts = numberFormatter.formatToParts(Number(value));\n\n  let formatted = replaceParts(parts, options);\n\n  // Does intl formatting add a suffix?\n  const intlSuffix = getSuffix(formatted, { ...options });\n\n  // Include decimal separator if user input ends with decimal separator\n  const includeDecimalSeparator = _value.slice(-1) === decimalSeparator ? decimalSeparator : '';\n\n  const [, decimals] = value.match(RegExp('\\\\d+\\\\.(\\\\d+)')) || [];\n\n  // Keep original decimal padding if no decimalScale\n  if (decimalScale === undefined && decimals && decimalSeparator) {\n    if (formatted.includes(decimalSeparator)) {\n      formatted = formatted.replace(\n        RegExp(`(\\\\d+)(${escapeRegExp(decimalSeparator)})(\\\\d+)`, 'g'),\n        `$1$2${decimals}`\n      );\n    } else {\n      if (intlSuffix && !suffix) {\n        formatted = formatted.replace(intlSuffix, `${decimalSeparator}${decimals}${intlSuffix}`);\n      } else {\n        formatted = `${formatted}${decimalSeparator}${decimals}`;\n      }\n    }\n  }\n\n  if (suffix && includeDecimalSeparator) {\n    return `${formatted}${includeDecimalSeparator}${suffix}`;\n  }\n\n  if (intlSuffix && includeDecimalSeparator) {\n    return formatted.replace(intlSuffix, `${includeDecimalSeparator}${intlSuffix}`);\n  }\n\n  if (intlSuffix && suffix) {\n    return formatted.replace(intlSuffix, `${includeDecimalSeparator}${suffix}`);\n  }\n\n  return [formatted, includeDecimalSeparator, suffix].join('');\n};\n\n/**\n * Before converting to Number, decimal separator has to be .\n */\nconst replaceDecimalSeparator = (\n  value: string,\n  decimalSeparator: FormatValueOptions['decimalSeparator'],\n  isNegative: boolean\n): string => {\n  let newValue = value;\n  if (decimalSeparator && decimalSeparator !== '.') {\n    newValue = newValue.replace(RegExp(escapeRegExp(decimalSeparator), 'g'), '.');\n    if (isNegative && decimalSeparator === '-') {\n      newValue = `-${newValue.slice(1)}`;\n    }\n  }\n  return newValue;\n};\n\nconst replaceParts = (\n  parts: Intl.NumberFormatPart[],\n  {\n    prefix,\n    groupSeparator,\n    decimalSeparator,\n    decimalScale,\n    disableGroupSeparators = false,\n  }: Pick<\n    FormatValueOptions,\n    'prefix' | 'groupSeparator' | 'decimalSeparator' | 'decimalScale' | 'disableGroupSeparators'\n  >\n): string => {\n  return parts\n    .reduce(\n      (prev, { type, value }, i) => {\n        if (type === 'currency' && prefix) {\n          return [...prev, prefix];\n        }\n\n        if (type === 'group') {\n          return !disableGroupSeparators\n            ? [...prev, groupSeparator !== undefined ? groupSeparator : value]\n            : prev;\n        }\n\n        if (type === 'decimal') {\n          if (decimalScale !== undefined && decimalScale === 0) {\n            return prev;\n          }\n\n          return [...prev, decimalSeparator !== undefined ? decimalSeparator : value];\n        }\n\n        if (type === 'fraction') {\n          return [...prev, decimalScale !== undefined ? value.slice(0, decimalScale) : value];\n        }\n\n        if (type === 'minusSign' && prefix) {\n          return [value, prefix];\n        }\n\n        if (prefix && i === 0) {\n          return [prefix, value];\n        }\n\n        return [...prev, value];\n      },\n      ['']\n    )\n    .join('');\n};\n","import { escapeRegExp } from './escapeRegExp';\ntype Options = {\n  decimalSeparator?: string;\n  groupSeparator?: string;\n};\n\nexport const getSuffix = (\n  value: string,\n  { groupSeparator = ',', decimalSeparator = '.' }: Options\n): string | undefined => {\n  const suffixReg = new RegExp(\n    `\\\\d([^${escapeRegExp(groupSeparator)}${escapeRegExp(decimalSeparator)}0-9]+)`\n  );\n  const suffixMatch = value.match(suffixReg);\n  return suffixMatch ? suffixMatch[1] : undefined;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Example1 from './examples/Example1';\nimport Example2 from './examples/Example2';\nimport Example3 from './examples/Example3';\nimport Example4 from './examples/Example4';\nimport FormatValuesExample from './examples/FormatValuesExample';\n\nReactDOM.render(<Example1 />, document.getElementById('example-1'));\n\nReactDOM.render(<Example2 />, document.getElementById('example-2'));\n\nReactDOM.render(<Example3 />, document.getElementById('example-3'));\n\nReactDOM.render(<Example4 />, document.getElementById('example-4'));\n\nReactDOM.render(<FormatValuesExample />, document.getElementById('format-values-example'));\n","module.exports = ReactDOM;","import React, { FC, useState } from 'react';\nimport CurrencyInput from '../components/CurrencyInput';\n\nexport const Example1: FC = () => {\n  const limit = 1000;\n  const prefix = '£';\n\n  const [errorMessage, setErrorMessage] = useState('');\n  const [className, setClassName] = useState('');\n  const [value, setValue] = useState<string | number>(123.45);\n  const [rawValue, setRawValue] = useState<string | undefined>(' ');\n\n  /**\n   * Handle validation\n   */\n  const handleOnValueChange = (value: string | undefined): void => {\n    setRawValue(value === undefined ? 'undefined' : value || ' ');\n\n    if (!value) {\n      setClassName('');\n      setValue('');\n      return;\n    }\n\n    if (Number.isNaN(Number(value))) {\n      setErrorMessage('Please enter a valid number');\n      setClassName('is-invalid');\n      return;\n    }\n\n    if (Number(value) > limit) {\n      setErrorMessage(`Max: ${prefix}${limit}`);\n      setClassName('is-invalid');\n      setValue(value);\n      return;\n    }\n\n    setClassName('is-valid');\n    setValue(value);\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-12 mb-4\">\n        <a href=\"https://github.com/cchanxzy/react-currency-input-field/blob/master/src/examples/Example1.tsx\">\n          <h2>Example 1</h2>\n        </a>\n        <ul>\n          <li>{`'£'`} prefix</li>\n          <li>Allows decimals (up to 2 decimal places)</li>\n          <li>Value is set programmatically (passed in via props)</li>\n        </ul>\n\n        <form className=\"needs-validation\">\n          <div className=\"row\">\n            <div className=\"form-group col\">\n              <label htmlFor=\"validationCustom01\">Please enter a value (max £1,000)</label>\n              <CurrencyInput\n                id=\"validationCustom01\"\n                name=\"input-1\"\n                className={`form-control ${className}`}\n                value={value}\n                onValueChange={handleOnValueChange}\n                placeholder=\"Please enter a number\"\n                prefix={prefix}\n                step={1}\n              />\n              <div className=\"invalid-feedback\">{errorMessage}</div>\n            </div>\n            <div className=\"form-group col\">\n              <pre className=\"h-100 p-3 bg-dark text-white\">\n                <div className=\"row\">\n                  <div className=\"col-6\">\n                    <div className=\"text-muted mr-3\">onValueChange:</div>\n                    {rawValue}\n                  </div>\n                </div>\n              </pre>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Example1;\n","import { parseAbbrValue } from './parseAbbrValue';\nimport { removeSeparators } from './removeSeparators';\nimport { removeInvalidChars } from './removeInvalidChars';\nimport { escapeRegExp } from './escapeRegExp';\nimport { CurrencyInputProps } from '../CurrencyInputProps';\n\nexport type CleanValueOptions = Pick<\n  CurrencyInputProps,\n  | 'decimalSeparator'\n  | 'groupSeparator'\n  | 'allowDecimals'\n  | 'decimalsLimit'\n  | 'allowNegativeValue'\n  | 'disableAbbreviations'\n  | 'prefix'\n> & { value: string };\n\n/**\n * Remove prefix, separators and extra decimals from value\n */\nexport const cleanValue = ({\n  value,\n  groupSeparator = ',',\n  decimalSeparator = '.',\n  allowDecimals = true,\n  decimalsLimit = 2,\n  allowNegativeValue = true,\n  disableAbbreviations = false,\n  prefix = '',\n}: CleanValueOptions): string => {\n  if (value === '-') {\n    return value;\n  }\n\n  const abbreviations = disableAbbreviations ? [] : ['k', 'm', 'b'];\n  const isNegative = new RegExp(`^\\\\d?-${prefix ? `${escapeRegExp(prefix)}?` : ''}\\\\d`).test(value);\n\n  // Is there a digit before the prefix? eg. 1$\n  const [prefixWithValue, preValue] = RegExp(`(\\\\d+)-?${escapeRegExp(prefix)}`).exec(value) || [];\n  const withoutPrefix = prefix\n    ? prefixWithValue\n      ? value.replace(prefixWithValue, '').concat(preValue)\n      : value.replace(prefix, '')\n    : value;\n  const withoutSeparators = removeSeparators(withoutPrefix, groupSeparator);\n  const withoutInvalidChars = removeInvalidChars(withoutSeparators, [\n    groupSeparator,\n    decimalSeparator,\n    ...abbreviations,\n  ]);\n\n  let valueOnly = withoutInvalidChars;\n\n  if (!disableAbbreviations) {\n    // disallow letter without number\n    if (abbreviations.some((letter) => letter === withoutInvalidChars.toLowerCase())) {\n      return '';\n    }\n    const parsed = parseAbbrValue(withoutInvalidChars, decimalSeparator);\n    if (parsed) {\n      valueOnly = String(parsed);\n    }\n  }\n\n  const includeNegative = isNegative && allowNegativeValue ? '-' : '';\n\n  if (decimalSeparator && valueOnly.includes(decimalSeparator)) {\n    const [int, decimals] = withoutInvalidChars.split(decimalSeparator);\n    const trimmedDecimals = decimalsLimit && decimals ? decimals.slice(0, decimalsLimit) : decimals;\n    const includeDecimals = allowDecimals ? `${decimalSeparator}${trimmedDecimals}` : '';\n\n    return `${includeNegative}${int}${includeDecimals}`;\n  }\n\n  return `${includeNegative}${valueOnly}`;\n};\n","import { escapeRegExp } from './escapeRegExp';\n\n/**\n * Abbreviate number eg. 1000 = 1k\n *\n * Source: https://stackoverflow.com/a/9345181\n */\nexport const abbrValue = (value: number, decimalSeparator = '.', _decimalPlaces = 10): string => {\n  if (value > 999) {\n    let valueLength = ('' + value).length;\n    const p = Math.pow;\n    const d = p(10, _decimalPlaces);\n    valueLength -= valueLength % 3;\n\n    const abbrValue = Math.round((value * d) / p(10, valueLength)) / d + ' kMGTPE'[valueLength / 3];\n    return abbrValue.replace('.', decimalSeparator);\n  }\n\n  return String(value);\n};\n\ntype AbbrMap = { [key: string]: number };\n\nconst abbrMap: AbbrMap = { k: 1000, m: 1000000, b: 1000000000 };\n\n/**\n * Parse a value with abbreviation e.g 1k = 1000\n */\nexport const parseAbbrValue = (value: string, decimalSeparator = '.'): number | undefined => {\n  const reg = new RegExp(`(\\\\d+(${escapeRegExp(decimalSeparator)}\\\\d+)?)([kmb])$`, 'i');\n  const match = value.match(reg);\n\n  if (match) {\n    const [, digits, , abbr] = match;\n    const multiplier = abbrMap[abbr.toLowerCase()];\n\n    return Number(digits.replace(decimalSeparator, '.')) * multiplier;\n  }\n\n  return undefined;\n};\n","import { escapeRegExp } from './escapeRegExp';\n\n/**\n * Remove group separator from value eg. 1,000 > 1000\n */\nexport const removeSeparators = (value: string, separator = ','): string => {\n  const reg = new RegExp(escapeRegExp(separator), 'g');\n  return value.replace(reg, '');\n};\n","import { escapeRegExp } from './escapeRegExp';\n\n/**\n * Remove invalid characters\n */\nexport const removeInvalidChars = (value: string, validChars: ReadonlyArray<string>): string => {\n  const chars = escapeRegExp(validChars.join(''));\n  const reg = new RegExp(`[^\\\\d${chars}]`, 'gi');\n  return value.replace(reg, '');\n};\n","export const fixedDecimalValue = (\n  value: string,\n  decimalSeparator: string,\n  fixedDecimalLength?: number\n): string => {\n  if (fixedDecimalLength && value.length > 1) {\n    if (value.includes(decimalSeparator)) {\n      const [int, decimals] = value.split(decimalSeparator);\n      if (decimals.length > fixedDecimalLength) {\n        return `${int}${decimalSeparator}${decimals.slice(0, fixedDecimalLength)}`;\n      }\n    }\n\n    const reg =\n      value.length > fixedDecimalLength\n        ? new RegExp(`(\\\\d+)(\\\\d{${fixedDecimalLength}})`)\n        : new RegExp(`(\\\\d)(\\\\d+)`);\n\n    const match = value.match(reg);\n    if (match) {\n      const [, int, decimals] = match;\n      return `${int}${decimalSeparator}${decimals}`;\n    }\n  }\n\n  return value;\n};\n","import { IntlConfig } from '../CurrencyInputProps';\n\ntype LocaleConfig = {\n  currencySymbol: string;\n  groupSeparator: string;\n  decimalSeparator: string;\n};\n\nconst defaultConfig: LocaleConfig = {\n  currencySymbol: '',\n  groupSeparator: '',\n  decimalSeparator: '',\n};\n\n/**\n * Get locale config from input or default\n */\nexport const getLocaleConfig = (intlConfig?: IntlConfig): LocaleConfig => {\n  const { locale, currency } = intlConfig || {};\n  const numberFormatter = locale\n    ? new Intl.NumberFormat(locale, currency ? { currency, style: 'currency' } : undefined)\n    : new Intl.NumberFormat();\n\n  return numberFormatter.formatToParts(1000.1).reduce((prev, curr): LocaleConfig => {\n    if (curr.type === 'currency') {\n      return { ...prev, currencySymbol: curr.value };\n    }\n    if (curr.type === 'group') {\n      return { ...prev, groupSeparator: curr.value };\n    }\n    if (curr.type === 'decimal') {\n      return { ...prev, decimalSeparator: curr.value };\n    }\n\n    return prev;\n  }, defaultConfig);\n};\n","export const isNumber = (input: string): boolean => RegExp(/\\d/, 'gi').test(input);\n","export const padTrimValue = (\n  value: string,\n  decimalSeparator = '.',\n  decimalScale?: number\n): string => {\n  if (decimalScale === undefined || value === '' || value === undefined) {\n    return value;\n  }\n\n  if (!value.match(/\\d/g)) {\n    return '';\n  }\n\n  const [int, decimals] = value.split(decimalSeparator);\n\n  if (decimalScale === 0) {\n    return int;\n  }\n\n  let newValue = decimals || '';\n\n  if (newValue.length < decimalScale) {\n    while (newValue.length < decimalScale) {\n      newValue += '0';\n    }\n  } else {\n    newValue = newValue.slice(0, decimalScale);\n  }\n\n  return `${int}${decimalSeparator}${newValue}`;\n};\n","import React, { FC, useState } from 'react';\nimport { hot } from 'react-hot-loader';\nimport CurrencyInput from '../components/CurrencyInput';\n\nexport const Example2: FC = () => {\n  const [errorMessage, setErrorMessage] = useState('');\n  const [className, setClassName] = useState('');\n  const [rawValue, setRawValue] = useState<string | undefined>(' ');\n\n  const validateValue = (value: string | undefined): void => {\n    const rawValue = value === undefined ? 'undefined' : value;\n    setRawValue(rawValue || ' ');\n\n    if (!value) {\n      setClassName('');\n    } else if (Number.isNaN(Number(value))) {\n      setErrorMessage('Please enter a valid number');\n      setClassName('is-invalid');\n    } else {\n      setClassName('is-valid');\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-12 mb-4\">\n        <a href=\"https://github.com/cchanxzy/react-currency-input-field/blob/master/src/examples/Example2.tsx\">\n          <h2>Example 2</h2>\n        </a>\n        <ul>\n          <li>{`'$'`} prefix</li>\n          <li>Has placeholder</li>\n          <li>Does not allow decimals</li>\n          <li>Value is stored via component state</li>\n        </ul>\n        <form className=\"needs-validation\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <label htmlFor=\"validation-example-2-field\">Please enter a value:</label>\n              <CurrencyInput\n                id=\"validation-example-2-field\"\n                placeholder=\"$1,234,567\"\n                allowDecimals={false}\n                className={`form-control ${className}`}\n                onValueChange={validateValue}\n                prefix={'$'}\n                step={10}\n              />\n              <div className=\"invalid-feedback\">{errorMessage}</div>\n            </div>\n            <div className=\"form-group col\">\n              <pre className=\"h-100 p-3 bg-dark text-white\">\n                <div className=\"row\">\n                  <div className=\"col-6\">\n                    <div className=\"text-muted mr-3\">onValueChange:</div>\n                    {rawValue}\n                  </div>\n                </div>\n              </pre>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default hot(module)(Example2);\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./dist/react-hot-loader.production.min.js');\n} else if (process.env.NODE_ENV === 'test') {\n  module.exports = require('./dist/react-hot-loader.production.min.js');\n} else if (typeof window === 'undefined') {\n  // this is just server environment\n  module.exports = require('./dist/react-hot-loader.production.min.js');\n} else if (!module.hot) {\n  module.exports = require('./dist/react-hot-loader.production.min.js');\n  module.exports.AppContainer.warnAboutHMRDisabled = true;\n  module.exports.hot.shouldWrapWithAppContainer = true;\n} else {\n  var evalAllowed = false;\n  var evalError = null;\n  try {\n    eval('evalAllowed = true');\n  } catch (e) {\n    // eval not allowed due to CSP\n    evalError = e && e.message ? e.message : 'unknown reason';\n  }\n\n  // TODO: dont use eval to update methods. see #1273\n  // RHL needs setPrototypeOf to operate Component inheritance, and eval to patch methods\n  var jsFeaturesPresent = !!Object.setPrototypeOf;\n\n  if (!jsFeaturesPresent || !evalAllowed) {\n    // we are not in prod mode, but RHL could not be activated\n    console.warn(\n      'React-Hot-Loader is not supported in this environment:',\n      [\n        !jsFeaturesPresent && \"some JS features are missing\",\n        !evalAllowed && \"`eval` is not allowed(\" + evalError + \")\"\n      ].join(','),\n      '.'\n    );\n    module.exports = require('./dist/react-hot-loader.production.min.js');\n  } else {\n    module.exports = window.reactHotLoaderGlobal = require('./dist/react-hot-loader.development.js');\n  }\n}\n","\"use strict\";function _interopDefault(e){return e&&\"object\"==typeof e&&\"default\"in e?e.default:e}Object.defineProperty(exports,\"__esModule\",{value:!0});var React=_interopDefault(require(\"react\"));function AppContainer(e){return AppContainer.warnAboutHMRDisabled&&(AppContainer.warnAboutHMRDisabled=!0,console.error(\"React-Hot-Loader: misconfiguration detected, using production version in non-production environment.\"),console.error(\"React-Hot-Loader: Hot Module Replacement is not enabled.\")),React.Children.only(e.children)}AppContainer.warnAboutHMRDisabled=!1;var hot=function e(){return e.shouldWrapWithAppContainer?function(e){return function(n){return React.createElement(AppContainer,null,React.createElement(e,n))}}:function(e){return e}};hot.shouldWrapWithAppContainer=!1;var areComponentsEqual=function(e,n){return e===n},setConfig=function(){},cold=function(e){return e},configureComponent=function(){};exports.AppContainer=AppContainer,exports.hot=hot,exports.areComponentsEqual=areComponentsEqual,exports.setConfig=setConfig,exports.cold=cold,exports.configureComponent=configureComponent;\n","import React, { FC, useState } from 'react';\nimport CurrencyInput from '../components/CurrencyInput';\nimport { CurrencyInputProps } from '../components/CurrencyInputProps';\n\nconst options: ReadonlyArray<CurrencyInputProps['intlConfig']> = [\n  {\n    locale: 'de-DE',\n    currency: 'EUR',\n  },\n  {\n    locale: 'en-US',\n    currency: 'USD',\n  },\n  {\n    locale: 'en-GB',\n    currency: 'GBP',\n  },\n  {\n    locale: 'ja-JP',\n    currency: 'JPY',\n  },\n  {\n    locale: 'en-IN',\n    currency: 'INR',\n  },\n];\n\nexport const Example3: FC = () => {\n  const [intlConfig, setIntlConfig] = useState<CurrencyInputProps['intlConfig']>(options[0]);\n  const [value, setValue] = useState<string | undefined>('123');\n  const [rawValue, setRawValue] = useState<string | undefined>(' ');\n\n  const handleOnValueChange = (value: string | undefined): void => {\n    setRawValue(value === undefined ? 'undefined' : value || ' ');\n    setValue(value);\n  };\n\n  const handleIntlSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const config = options[Number(event.target.value)];\n    if (config) {\n      setIntlConfig(config);\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-12 mb-4\">\n        <a href=\"https://github.com/cchanxzy/react-currency-input-field/blob/master/src/examples/Example3.tsx\">\n          <h2>Example 3</h2>\n        </a>\n        <ul>\n          <li>Intl config</li>\n        </ul>\n\n        <div className=\"row\"></div>\n\n        <div className=\"row\">\n          <div className=\"form-group col\">\n            <div className=\"row\">\n              <div className=\"col-12\">\n                <CurrencyInput\n                  id=\"validationCustom04\"\n                  name=\"input-1\"\n                  intlConfig={intlConfig}\n                  className={`form-control`}\n                  onValueChange={handleOnValueChange}\n                  decimalsLimit={6}\n                  value={value}\n                  step={1}\n                />\n              </div>\n              <div className=\"col-12 mt-3\">\n                <label htmlFor=\"intlConfigSelect\">Intl option</label>\n                <select className=\"form-control\" id=\"intlConfigSelect\" onChange={handleIntlSelect}>\n                  {options.map((config, i) => {\n                    if (config) {\n                      const { locale, currency } = config;\n                      return (\n                        <option key={`${locale}${currency}`} value={i}>\n                          {locale}\n                        </option>\n                      );\n                    }\n                  })}\n                </select>\n              </div>\n            </div>\n          </div>\n          <div className=\"form-group col\">\n            <pre className=\"h-100 p-3 bg-dark text-white\">\n              <div className=\"row\">\n                <div className=\"col-12\">\n                  <div className=\"text-muted mr-3\">onValueChange:</div>\n                  {rawValue}\n                  <div className=\"text-muted mr-3 mt-3\">intlConfig:</div>\n                  {JSON.stringify(intlConfig)}\n                </div>\n              </div>\n            </pre>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Example3;\n","import React, { FC, useReducer } from 'react';\nimport CurrencyInput, { formatValue } from '..';\n\ntype Field = {\n  value: number | undefined;\n  validationClass: string;\n  errorMessage: string;\n};\n\ntype ExampleState = {\n  field1: Field;\n  field2: Field;\n};\n\ntype Action = {\n  fieldName: string;\n  value: Field;\n};\n\nfunction reducer(state: ExampleState, { fieldName, value }: Action): ExampleState {\n  return {\n    ...state,\n    [fieldName]: value,\n  };\n}\n\nconst initialState: ExampleState = {\n  field1: {\n    value: 100,\n    validationClass: '',\n    errorMessage: '',\n  },\n  field2: {\n    value: 200,\n    validationClass: '',\n    errorMessage: '',\n  },\n};\n\nexport const Example4: FC = () => {\n  const prefix = '£';\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const handleOnValueChange = (_value: string | undefined, fieldName: string | undefined): void => {\n    if (!fieldName) {\n      return;\n    }\n\n    if (!_value) {\n      return dispatch({\n        fieldName,\n        value: {\n          value: undefined,\n          validationClass: '',\n          errorMessage: '',\n        },\n      });\n    }\n\n    const value = Number(_value);\n\n    if (!Number.isNaN(value)) {\n      dispatch({\n        fieldName,\n        value: {\n          value,\n          validationClass: 'is-valid',\n          errorMessage: '',\n        },\n      });\n    } else {\n      dispatch({\n        fieldName,\n        value: {\n          value,\n          validationClass: 'is-invalid',\n          errorMessage: 'Please enter a valid number',\n        },\n      });\n    }\n  };\n\n  const total = (state.field1.value || 0) + (state.field2.value || 0);\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-12 mb-4\">\n        <a href=\"https://github.com/cchanxzy/react-currency-input-field/blob/master/src/examples/Example4.tsx\">\n          <h2>Example 4</h2>\n        </a>\n        <ul>\n          <li>Add two values together</li>\n          <li>Format the total value</li>\n        </ul>\n\n        <form className=\"needs-validation\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <label htmlFor=\"validation-example-3-field1\">Value 1</label>\n              <CurrencyInput\n                id=\"validation-example-3-field1\"\n                name=\"field1\"\n                className={`form-control ${state.field1.validationClass}`}\n                value={state.field1.value}\n                onValueChange={handleOnValueChange}\n                prefix={prefix}\n              />\n              <div className=\"invalid-feedback\">{state.field1.errorMessage}</div>\n            </div>\n\n            <div className=\"col\">\n              <label htmlFor=\"validation-example-3-field2\">Value 2</label>\n              <CurrencyInput\n                id=\"validation-example-3-field2\"\n                name=\"field2\"\n                className={`form-control ${state.field2.validationClass}`}\n                value={state.field2.value}\n                onValueChange={handleOnValueChange}\n                prefix={prefix}\n              />\n              <div className=\"invalid-feedback\">{state.field1.errorMessage}</div>\n            </div>\n\n            <div className=\"col\">\n              <div className=\"\">\n                <label>Total:</label>\n                <div className=\"h3\">{formatValue({ prefix, value: String(total) })}</div>\n              </div>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Example4;\n","import CurrencyInput from './components/CurrencyInput';\n\nexport default CurrencyInput;\nexport { formatValue } from './components/utils/formatValue';\n","import React, { FC, useState } from 'react';\nimport { formatValue } from '../components/utils';\n\nconst FormatValuesExample: FC = () => {\n  const [value, setValue] = useState('123456789.999');\n  const [prefix, setPrefix] = useState('$');\n  const [groupSeparator, setGroupSeparator] = useState(',');\n  const [decimalSeparator, setDecimalSeparator] = useState('.');\n  const [disableGroupSeparators, setdisableGroupSeparators] = useState(false);\n\n  const handleValueChange = ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(value);\n  };\n\n  const handlePrefixChange = ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\n    setPrefix(value);\n  };\n\n  const handleGroupSeparatorChange = ({\n    target: { value },\n  }: React.ChangeEvent<HTMLInputElement>) => {\n    setGroupSeparator(value);\n  };\n\n  const handleDecimalSeparatorChange = ({\n    target: { value: newDecimalSeparator },\n  }: React.ChangeEvent<HTMLInputElement>) => {\n    setDecimalSeparator(newDecimalSeparator);\n  };\n\n  const handleTurnOffSeparatorChange = ({\n    target: { value },\n  }: React.ChangeEvent<HTMLInputElement>) => {\n    setdisableGroupSeparators(value === 'true' ? true : false);\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-12 mb-4\">\n        <a href=\"https://github.com/cchanxzy/react-currency-input-field/blob/master/src/examples/FormatValuesExample.tsx\">\n          <h2>Format values example</h2>\n        </a>\n        <ul>\n          <li>Use the `formatValue` function convert a value to a user friendly string</li>\n        </ul>\n        <div className=\"col-10\">\n          <div className=\"row mt-3\">\n            <div className=\"col\">\n              <label>Value (Number only)</label>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                value={value}\n                onChange={handleValueChange}\n              />\n            </div>\n            <div className=\"col-3\">\n              <label>Prefix</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                value={prefix}\n                onChange={handlePrefixChange}\n              />\n            </div>\n            <div className=\"col-3\">\n              <label>Group Separator</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                value={groupSeparator}\n                onChange={handleGroupSeparatorChange}\n              />\n            </div>\n            <div className=\"col-3\">\n              <label>Decimal Separator</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                value={decimalSeparator}\n                onChange={handleDecimalSeparatorChange}\n              />\n            </div>\n          </div>\n          <div className=\"row mt-3\">\n            <div className=\"col mt-3\">\n              Turn off separators:\n              <div className=\"ml-3 custom-control custom-radio custom-control-inline\">\n                <input\n                  type=\"radio\"\n                  id=\"disableGroupSeparatorsTrue\"\n                  className=\"custom-control-input\"\n                  value=\"true\"\n                  onChange={handleTurnOffSeparatorChange}\n                  checked={disableGroupSeparators}\n                />\n                <label className=\"custom-control-label\" htmlFor=\"disableGroupSeparatorsTrue\">\n                  True\n                </label>\n              </div>\n              <div className=\"custom-control custom-radio custom-control-inline\">\n                <input\n                  type=\"radio\"\n                  id=\"disableGroupSeparatorsFalse\"\n                  className=\"custom-control-input\"\n                  value=\"false\"\n                  onChange={handleTurnOffSeparatorChange}\n                  checked={disableGroupSeparators === false}\n                />\n                <label className=\"custom-control-label\" htmlFor=\"disableGroupSeparatorsFalse\">\n                  False\n                </label>\n              </div>\n            </div>\n          </div>\n          <div className=\"mt-5\">\n            Formatted value:\n            <div className=\"display-4\">\n              {formatValue({\n                value,\n                groupSeparator,\n                decimalSeparator,\n                disableGroupSeparators,\n                prefix,\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FormatValuesExample;\n"],"sourceRoot":""}