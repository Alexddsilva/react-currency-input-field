{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"React\"","webpack:///./src/components/utils/escapeRegExp.ts","webpack:///./src/components/CurrencyInput.tsx","webpack:///./src/components/utils/index.ts","webpack:///./src/components/utils/formatValue.ts","webpack:///./src/components/utils/getSuffix.ts","webpack:///./src/example.tsx","webpack:///external \"ReactDOM\"","webpack:///./src/examples/Example1.tsx","webpack:///./src/components/utils/cleanValue.ts","webpack:///./src/components/utils/parseAbbrValue.ts","webpack:///./src/components/utils/removeSeparators.ts","webpack:///./src/components/utils/removeInvalidChars.ts","webpack:///./src/components/utils/fixedDecimalValue.ts","webpack:///./src/components/utils/getLocaleConfig.ts","webpack:///./src/components/utils/isNumber.ts","webpack:///./src/components/utils/padTrimValue.ts","webpack:///./src/examples/Example2.tsx","webpack:///(webpack)/buildin/module.js","webpack:///./node_modules/react-hot-loader/index.js","webpack:///./node_modules/react-hot-loader/dist/react-hot-loader.production.min.js","webpack:///./src/examples/Example3.tsx","webpack:///./src/examples/Example4.tsx","webpack:///./src/index.ts","webpack:///./src/examples/FormatValuesExample.tsx"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","React","escapeRegExp","stringToGoIntoTheRegex","replace","CurrencyInput","forwardRef","ref","allowDecimals","allowNegativeValue","id","className","customInput","decimalsLimit","defaultValue","disabled","userMaxLength","userValue","onValueChange","fixedDecimalLength","placeholder","decimalScale","prefix","intlConfig","step","disableGroupSeparators","disableAbbreviations","_decimalSeparator","_groupSeparator","onChange","onFocus","onBlur","onKeyDown","onKeyUp","props","Error","isNumber","localeConfig","useMemo","getLocaleConfig","decimalSeparator","groupSeparator","formatValueOptions","cleanValueOptions","_defaultValue","undefined","formatValue","String","useState","stateValue","setStateValue","cursor","setCursor","inputRef","useRef","processChange","selectionStart","valueOnly","cleanValue","length","formattedValue","useEffect","current","setSelectionRange","formattedPropsValue","inputProps","type","inputMode","event","fixedDecimals","fixedDecimalValue","newValue","padTrimValue","preventDefault","currentValue","Number","suffix","getSuffix","newCursor","CustomInput","displayName","options","_value","isNegative","RegExp","test","replaceDecimalSeparator","parts","Intl","NumberFormat","locale","style","currency","minimumFractionDigits","maximumFractionDigits","formatToParts","formatted","replaceParts","includeDecimalSeparator","slice","decimals","match","includes","join","reduce","prev","suffixReg","suffixMatch","render","document","getElementById","ReactDOM","Example1","errorMessage","setErrorMessage","setClassName","setValue","rawValue","setRawValue","href","htmlFor","isNaN","abbreviations","exec","prefixWithValue","preValue","withoutPrefix","concat","withoutSeparators","removeSeparators","withoutInvalidChars","removeInvalidChars","some","letter","toLowerCase","parsed","parseAbbrValue","includeNegative","split","int","trimmedDecimals","abbrValue","_decimalPlaces","valueLength","Math","pow","round","abbrMap","k","b","reg","digits","abbr","multiplier","separator","validChars","chars","defaultConfig","currencySymbol","curr","input","Example2","hot","webpackPolyfill","deprecate","paths","children","e","default","AppContainer","warnAboutHMRDisabled","console","error","Children","only","shouldWrapWithAppContainer","createElement","areComponentsEqual","setConfig","cold","configureComponent","Example3","setIntlConfig","config","target","map","JSON","stringify","reducer","state","fieldName","initialState","field1","validationClass","field2","Example4","useReducer","dispatch","handleOnValueChange","total","setPrefix","setGroupSeparator","setDecimalSeparator","setdisableGroupSeparators","handleTurnOffSeparatorChange","newDecimalSeparator","checked"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","module.exports = React;","/**\n * Escape regex char\n *\n * See: https://stackoverflow.com/questions/17885855/use-dynamic-variable-string-as-regex-pattern-in-javascript\n */\nexport const escapeRegExp = (stringToGoIntoTheRegex: string): string => {\n  return stringToGoIntoTheRegex.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n};\n","import React, { FC, useState, useEffect, useRef, forwardRef, useMemo } from 'react';\nimport { CurrencyInputProps } from './CurrencyInputProps';\nimport {\n  isNumber,\n  cleanValue,\n  fixedDecimalValue,\n  formatValue,\n  getLocaleConfig,\n  padTrimValue,\n  CleanValueOptions,\n  getSuffix,\n} from './utils';\n\nexport const CurrencyInput: FC<CurrencyInputProps> = forwardRef<\n  HTMLInputElement,\n  CurrencyInputProps\n>(\n  (\n    {\n      allowDecimals = true,\n      allowNegativeValue = true,\n      id,\n      name,\n      className,\n      customInput,\n      decimalsLimit,\n      defaultValue,\n      disabled = false,\n      maxLength: userMaxLength,\n      value: userValue,\n      onValueChange,\n      fixedDecimalLength,\n      placeholder,\n      decimalScale,\n      prefix,\n      intlConfig,\n      step,\n      disableGroupSeparators = false,\n      disableAbbreviations = false,\n      decimalSeparator: _decimalSeparator,\n      groupSeparator: _groupSeparator,\n      onChange,\n      onFocus,\n      onBlur,\n      onKeyDown,\n      onKeyUp,\n      ...props\n    }: CurrencyInputProps,\n    ref\n  ) => {\n    if (_decimalSeparator && _groupSeparator && _decimalSeparator === _groupSeparator) {\n      throw new Error('decimalSeparator cannot be the same as groupSeparator');\n    }\n\n    if (_decimalSeparator && isNumber(_decimalSeparator)) {\n      throw new Error('decimalSeparator cannot be a number');\n    }\n\n    if (_groupSeparator && isNumber(_groupSeparator)) {\n      throw new Error('groupSeparator cannot be a number');\n    }\n\n    const localeConfig = useMemo(() => getLocaleConfig(intlConfig), [intlConfig]);\n    const decimalSeparator = _decimalSeparator || localeConfig.decimalSeparator || '';\n    const groupSeparator = _groupSeparator || localeConfig.groupSeparator || '';\n\n    const formatValueOptions = {\n      decimalSeparator,\n      groupSeparator,\n      disableGroupSeparators,\n      intlConfig,\n      prefix,\n    };\n\n    const cleanValueOptions: Partial<CleanValueOptions> = {\n      decimalSeparator,\n      groupSeparator,\n      allowDecimals,\n      decimalsLimit: decimalsLimit || fixedDecimalLength || 2,\n      allowNegativeValue,\n      disableAbbreviations,\n      prefix,\n    };\n\n    const _defaultValue =\n      defaultValue !== undefined\n        ? formatValue({ value: String(defaultValue), ...formatValueOptions })\n        : userValue !== undefined\n        ? formatValue({ value: String(userValue), ...formatValueOptions })\n        : '';\n    const [stateValue, setStateValue] = useState(_defaultValue);\n    const [cursor, setCursor] = useState(0);\n    const inputRef = ref || useRef<HTMLInputElement>(null);\n\n    const processChange = (value: string, selectionStart?: number | null): void => {\n      const valueOnly = cleanValue({ value, ...cleanValueOptions });\n\n      if (valueOnly === '') {\n        onValueChange && onValueChange(undefined, name);\n        setStateValue('');\n        return;\n      }\n\n      if (userMaxLength && valueOnly.replace(/-/g, '').length > userMaxLength) {\n        return;\n      }\n\n      if (valueOnly === '-') {\n        onValueChange && onValueChange(undefined, name);\n        setStateValue(value);\n        return;\n      }\n\n      const formattedValue = formatValue({ value: valueOnly, ...formatValueOptions });\n\n      /* istanbul ignore next */\n      if (selectionStart !== undefined && selectionStart !== null) {\n        // Prevent cursor jumping\n        const cursor = selectionStart + (formattedValue.length - value.length) || 1;\n        setCursor(cursor);\n      }\n\n      setStateValue(formattedValue);\n\n      onValueChange && onValueChange(valueOnly, name);\n    };\n\n    const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n      const {\n        target: { value, selectionStart },\n      } = event;\n\n      processChange(value, selectionStart);\n\n      onChange && onChange(event);\n    };\n\n    const handleOnFocus = (event: React.FocusEvent<HTMLInputElement>): number => {\n      onFocus && onFocus(event);\n      return stateValue ? stateValue.length : 0;\n    };\n\n    const handleOnBlur = (event: React.FocusEvent<HTMLInputElement>): void => {\n      const {\n        target: { value },\n      } = event;\n\n      const valueOnly = cleanValue({ value, ...cleanValueOptions });\n\n      if (valueOnly === '-' || !valueOnly) {\n        setStateValue('');\n        onBlur && onBlur(event);\n        return;\n      }\n\n      const fixedDecimals = fixedDecimalValue(valueOnly, decimalSeparator, fixedDecimalLength);\n\n      // Add padding or trim value to decimalScale\n      const newValue = padTrimValue(\n        fixedDecimals,\n        decimalSeparator,\n        decimalScale || fixedDecimalLength\n      );\n\n      onValueChange && onValueChange(newValue, name);\n\n      const formattedValue = formatValue({\n        ...formatValueOptions,\n        value: newValue,\n      });\n\n      setStateValue(formattedValue);\n\n      onBlur && onBlur(event);\n    };\n\n    const handleOnKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n      const { key } = event;\n\n      if (step && (key === 'ArrowUp' || key === 'ArrowDown')) {\n        event.preventDefault();\n        const currentValue =\n          Number(\n            userValue !== undefined\n              ? userValue\n              : cleanValue({ value: stateValue, ...cleanValueOptions })\n          ) || 0;\n        const newValue = key === 'ArrowUp' ? currentValue + step : currentValue - step;\n        processChange(String(newValue));\n      }\n\n      onKeyDown && onKeyDown(event);\n    };\n\n    const handleOnKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\n      const {\n        currentTarget: { selectionStart },\n      } = event;\n      const suffix = getSuffix(stateValue, { groupSeparator, decimalSeparator });\n\n      if (suffix && selectionStart && selectionStart > stateValue.length - suffix.length) {\n        if (inputRef && typeof inputRef === 'object' && inputRef.current) {\n          const newCursor = stateValue.length - suffix.length;\n          inputRef.current.setSelectionRange(newCursor, newCursor);\n        }\n      }\n\n      onKeyUp && onKeyUp(event);\n    };\n\n    /* istanbul ignore next */\n    useEffect(() => {\n      if (inputRef && typeof inputRef === 'object' && inputRef.current) {\n        inputRef.current.setSelectionRange(cursor, cursor);\n      }\n    }, [cursor, inputRef]);\n\n    const formattedPropsValue =\n      userValue !== undefined\n        ? formatValue({\n            ...formatValueOptions,\n            value: String(userValue),\n          })\n        : undefined;\n\n    const inputProps: React.InputHTMLAttributes<HTMLInputElement> = {\n      type: 'text',\n      inputMode: 'decimal',\n      id,\n      name,\n      className,\n      onChange: handleOnChange,\n      onBlur: handleOnBlur,\n      onFocus: handleOnFocus,\n      onKeyDown: handleOnKeyDown,\n      onKeyUp: handleOnKeyUp,\n      placeholder,\n      disabled,\n      value:\n        formattedPropsValue !== undefined && stateValue !== '-' ? formattedPropsValue : stateValue,\n      ref: inputRef,\n      ...props,\n    };\n\n    if (customInput) {\n      const CustomInput = customInput;\n      return <CustomInput {...inputProps} />;\n    }\n\n    return <input {...inputProps} />;\n  }\n);\n\nCurrencyInput.displayName = 'CurrencyInput';\n\nexport default CurrencyInput;\n","export * from './cleanValue';\nexport * from './fixedDecimalValue';\nexport * from './formatValue';\nexport * from './getLocaleConfig';\nexport * from './getSuffix';\nexport * from './isNumber';\nexport * from './padTrimValue';\n","import { IntlConfig } from '../CurrencyInputProps';\nimport { escapeRegExp } from './escapeRegExp';\nimport { getSuffix } from './getSuffix';\n\ntype FormatValueOptions = {\n  /**\n   * Value to format\n   */\n  value: string | undefined;\n\n  /**\n   * Decimal separator\n   *\n   * Default = '.'\n   */\n  decimalSeparator?: string;\n\n  /**\n   * Group separator\n   *\n   * Default = ','\n   */\n  groupSeparator?: string;\n\n  /**\n   * Turn off separators\n   *\n   * This will override Group separators\n   *\n   * Default = false\n   */\n  disableGroupSeparators?: boolean;\n\n  /**\n   * Intl locale currency config\n   */\n  intlConfig?: IntlConfig;\n\n  /**\n   * Prefix\n   */\n  prefix?: string;\n};\n\n/**\n * Format value with decimal separator, group separator and prefix\n */\nexport const formatValue = (options: FormatValueOptions): string => {\n  const { value: _value, decimalSeparator, intlConfig, prefix = '' } = options;\n\n  if (_value === '' || _value === undefined) {\n    return '';\n  }\n\n  if (_value === '-') {\n    return '-';\n  }\n\n  const isNegative = new RegExp(`^\\\\d?-${prefix ? `${escapeRegExp(prefix)}?` : ''}\\\\d`).test(\n    _value\n  );\n  const value =\n    decimalSeparator !== '.'\n      ? replaceDecimalSeparator(_value, decimalSeparator, isNegative)\n      : _value;\n\n  const numberFormatter = intlConfig\n    ? new Intl.NumberFormat(intlConfig.locale, {\n        style: 'currency',\n        currency: intlConfig.currency,\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 20,\n      })\n    : new Intl.NumberFormat(undefined, {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 20,\n      });\n\n  const parts = numberFormatter.formatToParts(Number(value));\n\n  let formatted = replaceParts(parts, options);\n\n  // Without intl config, number formatter won't include currency symbol ie. prefix\n  if (!intlConfig) {\n    formatted = isNegative ? formatted.replace(/^-/g, `-${prefix}`) : `${prefix}${formatted}`;\n  }\n\n  // Does intl formatting add a suffix?\n  const suffix = getSuffix(formatted, { ...options });\n\n  // Include decimal separator if user input ends with decimal separator\n  const includeDecimalSeparator = _value.slice(-1) === decimalSeparator ? decimalSeparator : '';\n\n  // Keep original decimal padding\n  const [, decimals] = value.match(RegExp('\\\\d+\\\\.(\\\\d+)')) || [];\n\n  if (decimals && decimalSeparator) {\n    if (formatted.includes(decimalSeparator)) {\n      formatted = formatted.replace(\n        RegExp(`(\\\\d+)(${escapeRegExp(decimalSeparator)})(\\\\d+)`, 'g'),\n        `$1$2${decimals}`\n      );\n    } else {\n      if (suffix) {\n        formatted = formatted.replace(suffix, `${decimalSeparator}${decimals}${suffix}`);\n      } else {\n        formatted = `${formatted}${decimalSeparator}${decimals}`;\n      }\n    }\n  }\n\n  if (suffix && includeDecimalSeparator) {\n    return formatted.replace(suffix, `${includeDecimalSeparator}${suffix}`);\n  }\n\n  return [formatted, includeDecimalSeparator].join('');\n};\n\n/**\n * Before converting to Number, decimal separator has to be .\n */\nconst replaceDecimalSeparator = (\n  value: string,\n  decimalSeparator: FormatValueOptions['decimalSeparator'],\n  isNegative: boolean\n): string => {\n  let newValue = value;\n  if (decimalSeparator && decimalSeparator !== '.') {\n    newValue = newValue.replace(RegExp(escapeRegExp(decimalSeparator), 'g'), '.');\n    if (isNegative && decimalSeparator === '-') {\n      newValue = `-${newValue.slice(1)}`;\n    }\n  }\n  return newValue;\n};\n\nconst replaceParts = (\n  parts: Intl.NumberFormatPart[],\n  {\n    prefix,\n    groupSeparator,\n    decimalSeparator,\n    disableGroupSeparators = false,\n  }: Pick<\n    FormatValueOptions,\n    'prefix' | 'groupSeparator' | 'decimalSeparator' | 'disableGroupSeparators'\n  >\n): string => {\n  return parts\n    .reduce(\n      (prev, { type, value }) => {\n        if (type === 'currency' && prefix) {\n          return [...prev, prefix];\n        }\n\n        if (type === 'group') {\n          return !disableGroupSeparators\n            ? [...prev, groupSeparator !== undefined ? groupSeparator : value]\n            : prev;\n        }\n\n        if (type === 'decimal') {\n          return [...prev, decimalSeparator !== undefined ? decimalSeparator : value];\n        }\n\n        return [...prev, value];\n      },\n      ['']\n    )\n    .join('');\n};\n","import { escapeRegExp } from './escapeRegExp';\ntype Options = {\n  decimalSeparator?: string;\n  groupSeparator?: string;\n};\n\nexport const getSuffix = (\n  value: string,\n  { groupSeparator = ',', decimalSeparator = '.' }: Options\n): string | undefined => {\n  const suffixReg = new RegExp(\n    `\\\\d([^${escapeRegExp(groupSeparator)}${escapeRegExp(decimalSeparator)}0-9].)`\n  );\n  const suffixMatch = value.match(suffixReg);\n  return suffixMatch ? suffixMatch[1] : undefined;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Example1 from './examples/Example1';\nimport Example2 from './examples/Example2';\nimport Example3 from './examples/Example3';\nimport Example4 from './examples/Example4';\nimport FormatValuesExample from './examples/FormatValuesExample';\n\nReactDOM.render(<Example1 />, document.getElementById('example-1'));\n\nReactDOM.render(<Example2 />, document.getElementById('example-2'));\n\nReactDOM.render(<Example3 />, document.getElementById('example-3'));\n\nReactDOM.render(<Example4 />, document.getElementById('example-4'));\n\nReactDOM.render(<FormatValuesExample />, document.getElementById('format-values-example'));\n","module.exports = ReactDOM;","import React, { FC, useState } from 'react';\nimport CurrencyInput from '../components/CurrencyInput';\n\nexport const Example1: FC = () => {\n  const limit = 1000;\n  const prefix = '£';\n\n  const [errorMessage, setErrorMessage] = useState('');\n  const [className, setClassName] = useState('');\n  const [value, setValue] = useState<string | number>(123.45);\n  const [rawValue, setRawValue] = useState<string | undefined>(' ');\n\n  /**\n   * Handle validation\n   */\n  const handleOnValueChange = (value: string | undefined): void => {\n    setRawValue(value === undefined ? 'undefined' : value || ' ');\n\n    if (!value) {\n      setClassName('');\n      setValue('');\n      return;\n    }\n\n    if (Number.isNaN(Number(value))) {\n      setErrorMessage('Please enter a valid number');\n      setClassName('is-invalid');\n      return;\n    }\n\n    if (Number(value) > limit) {\n      setErrorMessage(`Max: ${prefix}${limit}`);\n      setClassName('is-invalid');\n      setValue(value);\n      return;\n    }\n\n    setClassName('is-valid');\n    setValue(value);\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-12 mb-4\">\n        <a href=\"https://github.com/cchanxzy/react-currency-input-field/blob/master/src/examples/Example1.tsx\">\n          <h2>Example 1</h2>\n        </a>\n        <ul>\n          <li>{`'£'`} prefix</li>\n          <li>Allows decimals (up to 2 decimal places)</li>\n          <li>Value is set programmatically (passed in via props)</li>\n        </ul>\n\n        <form className=\"needs-validation\">\n          <div className=\"row\">\n            <div className=\"form-group col\">\n              <label htmlFor=\"validationCustom01\">Please enter a value (max £1,000)</label>\n              <CurrencyInput\n                id=\"validationCustom01\"\n                name=\"input-1\"\n                className={`form-control ${className}`}\n                value={value}\n                onValueChange={handleOnValueChange}\n                placeholder=\"Please enter a number\"\n                prefix={prefix}\n                step={1}\n              />\n              <div className=\"invalid-feedback\">{errorMessage}</div>\n            </div>\n            <div className=\"form-group col\">\n              <pre className=\"h-100 p-3 bg-dark text-white\">\n                <div className=\"row\">\n                  <div className=\"col-6\">\n                    <div className=\"text-muted mr-3\">onValueChange:</div>\n                    {rawValue}\n                  </div>\n                </div>\n              </pre>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Example1;\n","import { parseAbbrValue } from './parseAbbrValue';\nimport { removeSeparators } from './removeSeparators';\nimport { removeInvalidChars } from './removeInvalidChars';\nimport { escapeRegExp } from './escapeRegExp';\n\nexport type CleanValueOptions = {\n  value: string;\n  decimalSeparator?: string;\n  groupSeparator?: string;\n  allowDecimals?: boolean;\n  decimalsLimit?: number;\n  allowNegativeValue?: boolean;\n  disableAbbreviations?: boolean;\n  prefix?: string;\n};\n\n/**\n * Remove prefix, separators and extra decimals from value\n */\nexport const cleanValue = ({\n  value,\n  groupSeparator = ',',\n  decimalSeparator = '.',\n  allowDecimals = true,\n  decimalsLimit = 2,\n  allowNegativeValue = true,\n  disableAbbreviations = false,\n  prefix = '',\n}: CleanValueOptions): string => {\n  if (value === '-') {\n    return value;\n  }\n\n  const abbreviations = disableAbbreviations ? [] : ['k', 'm', 'b'];\n  const isNegative = new RegExp(`^\\\\d?-${prefix ? `${escapeRegExp(prefix)}?` : ''}\\\\d`).test(value);\n\n  const [prefixWithValue, preValue] = RegExp(`(\\\\d+)-?${escapeRegExp(prefix)}`).exec(value) || [];\n  const withoutPrefix = prefix ? value.replace(prefixWithValue, '').concat(preValue) : value;\n  const withoutSeparators = removeSeparators(withoutPrefix, groupSeparator);\n  const withoutInvalidChars = removeInvalidChars(withoutSeparators, [\n    groupSeparator,\n    decimalSeparator,\n    ...abbreviations,\n  ]);\n\n  let valueOnly = withoutInvalidChars;\n\n  if (!disableAbbreviations) {\n    // disallow letter without number\n    if (abbreviations.some((letter) => letter === withoutInvalidChars.toLowerCase())) {\n      return '';\n    }\n    const parsed = parseAbbrValue(withoutInvalidChars, decimalSeparator);\n    if (parsed) {\n      valueOnly = String(parsed);\n    }\n  }\n\n  const includeNegative = isNegative && allowNegativeValue ? '-' : '';\n\n  if (decimalSeparator && valueOnly.includes(decimalSeparator)) {\n    const [int, decimals] = withoutInvalidChars.split(decimalSeparator);\n    const trimmedDecimals = decimalsLimit && decimals ? decimals.slice(0, decimalsLimit) : decimals;\n    const includeDecimals = allowDecimals ? `${decimalSeparator}${trimmedDecimals}` : '';\n\n    return `${includeNegative}${int}${includeDecimals}`;\n  }\n\n  return `${includeNegative}${valueOnly}`;\n};\n","import { escapeRegExp } from './escapeRegExp';\n\n/**\n * Abbreviate number eg. 1000 = 1k\n *\n * Source: https://stackoverflow.com/a/9345181\n */\nexport const abbrValue = (value: number, decimalSeparator = '.', _decimalPlaces = 10): string => {\n  if (value > 999) {\n    let valueLength = ('' + value).length;\n    const p = Math.pow;\n    const d = p(10, _decimalPlaces);\n    valueLength -= valueLength % 3;\n\n    const abbrValue = Math.round((value * d) / p(10, valueLength)) / d + ' kMGTPE'[valueLength / 3];\n    return abbrValue.replace('.', decimalSeparator);\n  }\n\n  return String(value);\n};\n\ntype AbbrMap = { [key: string]: number };\n\nconst abbrMap: AbbrMap = { k: 1000, m: 1000000, b: 1000000000 };\n\n/**\n * Parse a value with abbreviation e.g 1k = 1000\n */\nexport const parseAbbrValue = (value: string, decimalSeparator = '.'): number | undefined => {\n  const reg = new RegExp(`(\\\\d+(${escapeRegExp(decimalSeparator)}\\\\d+)?)([kmb])$`, 'i');\n  const match = value.match(reg);\n\n  if (match) {\n    const [, digits, , abbr] = match;\n    const multiplier = abbrMap[abbr.toLowerCase()];\n\n    return Number(digits.replace(decimalSeparator, '.')) * multiplier;\n  }\n\n  return undefined;\n};\n","import { escapeRegExp } from './escapeRegExp';\n\n/**\n * Remove group separator from value eg. 1,000 > 1000\n */\nexport const removeSeparators = (value: string, separator = ','): string => {\n  const reg = new RegExp(escapeRegExp(separator), 'g');\n  return value.replace(reg, '');\n};\n","import { escapeRegExp } from './escapeRegExp';\n\n/**\n * Remove invalid characters\n */\nexport const removeInvalidChars = (value: string, validChars: ReadonlyArray<string>): string => {\n  const chars = escapeRegExp(validChars.join(''));\n  const reg = new RegExp(`[^\\\\d${chars}]`, 'gi');\n  return value.replace(reg, '');\n};\n","export const fixedDecimalValue = (\n  value: string,\n  decimalSeparator: string,\n  fixedDecimalLength?: number\n): string => {\n  if (fixedDecimalLength && value.length > 1) {\n    if (value.includes(decimalSeparator)) {\n      const [int, decimals] = value.split(decimalSeparator);\n      if (decimals.length > fixedDecimalLength) {\n        return `${int}${decimalSeparator}${decimals.slice(0, fixedDecimalLength)}`;\n      }\n    }\n\n    const reg =\n      value.length > fixedDecimalLength\n        ? new RegExp(`(\\\\d+)(\\\\d{${fixedDecimalLength}})`)\n        : new RegExp(`(\\\\d)(\\\\d+)`);\n\n    const match = value.match(reg);\n    if (match) {\n      const [, int, decimals] = match;\n      return `${int}${decimalSeparator}${decimals}`;\n    }\n  }\n\n  return value;\n};\n","import { IntlConfig } from '../CurrencyInputProps';\n\ntype LocaleConfig = {\n  currencySymbol: string;\n  groupSeparator: string;\n  decimalSeparator: string;\n};\n\nconst defaultConfig: LocaleConfig = {\n  currencySymbol: '',\n  groupSeparator: '',\n  decimalSeparator: '',\n};\n\n/**\n * Get locale config from input or default\n */\nexport const getLocaleConfig = (intlConfig?: IntlConfig): LocaleConfig => {\n  const { locale, currency } = intlConfig || {};\n  const numberFormatter =\n    locale && currency\n      ? new Intl.NumberFormat(locale, { currency, style: 'currency' })\n      : new Intl.NumberFormat();\n\n  return numberFormatter.formatToParts(1000.1).reduce((prev, curr): LocaleConfig => {\n    if (curr.type === 'currency') {\n      return { ...prev, currencySymbol: curr.value };\n    }\n    if (curr.type === 'group') {\n      return { ...prev, groupSeparator: curr.value };\n    }\n    if (curr.type === 'decimal') {\n      return { ...prev, decimalSeparator: curr.value };\n    }\n\n    return prev;\n  }, defaultConfig);\n};\n","export const isNumber = (input: string): boolean => RegExp(/\\d/, 'gi').test(input);\n","export const padTrimValue = (\n  value: string,\n  decimalSeparator = '.',\n  decimalScale?: number\n): string => {\n  if (!decimalScale || value === '' || value === undefined) {\n    return value;\n  }\n\n  if (!value.match(/\\d/g)) {\n    return '';\n  }\n\n  const [int, decimals] = value.split(decimalSeparator);\n  let newValue = decimals || '';\n\n  if (newValue.length < decimalScale) {\n    while (newValue.length < decimalScale) {\n      newValue += '0';\n    }\n  } else {\n    newValue = newValue.slice(0, decimalScale);\n  }\n\n  return `${int}${decimalSeparator}${newValue}`;\n};\n","import React, { FC, useState } from 'react';\nimport { hot } from 'react-hot-loader';\nimport CurrencyInput from '../components/CurrencyInput';\n\nexport const Example2: FC = () => {\n  const [errorMessage, setErrorMessage] = useState('');\n  const [className, setClassName] = useState('');\n  const [rawValue, setRawValue] = useState<string | undefined>(' ');\n\n  const validateValue = (value: string | undefined): void => {\n    const rawValue = value === undefined ? 'undefined' : value;\n    setRawValue(rawValue || ' ');\n\n    if (!value) {\n      setClassName('');\n    } else if (Number.isNaN(Number(value))) {\n      setErrorMessage('Please enter a valid number');\n      setClassName('is-invalid');\n    } else {\n      setClassName('is-valid');\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-12 mb-4\">\n        <a href=\"https://github.com/cchanxzy/react-currency-input-field/blob/master/src/examples/Example2.tsx\">\n          <h2>Example 2</h2>\n        </a>\n        <ul>\n          <li>{`'$'`} prefix</li>\n          <li>Has placeholder</li>\n          <li>Does not allow decimals</li>\n          <li>Value is stored via component state</li>\n        </ul>\n        <form className=\"needs-validation\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <label htmlFor=\"validation-example-2-field\">Please enter a value:</label>\n              <CurrencyInput\n                id=\"validation-example-2-field\"\n                placeholder=\"$1,234,567\"\n                allowDecimals={false}\n                className={`form-control ${className}`}\n                onValueChange={validateValue}\n                prefix={'$'}\n                step={10}\n              />\n              <div className=\"invalid-feedback\">{errorMessage}</div>\n            </div>\n            <div className=\"form-group col\">\n              <pre className=\"h-100 p-3 bg-dark text-white\">\n                <div className=\"row\">\n                  <div className=\"col-6\">\n                    <div className=\"text-muted mr-3\">onValueChange:</div>\n                    {rawValue}\n                  </div>\n                </div>\n              </pre>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default hot(module)(Example2);\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./dist/react-hot-loader.production.min.js');\n} else if (process.env.NODE_ENV === 'test') {\n  module.exports = require('./dist/react-hot-loader.production.min.js');\n} else if (typeof window === 'undefined') {\n  // this is just server environment\n  module.exports = require('./dist/react-hot-loader.production.min.js');\n} else if (!module.hot) {\n  module.exports = require('./dist/react-hot-loader.production.min.js');\n  module.exports.AppContainer.warnAboutHMRDisabled = true;\n  module.exports.hot.shouldWrapWithAppContainer = true;\n} else {\n  var evalAllowed = false;\n  var evalError = null;\n  try {\n    eval('evalAllowed = true');\n  } catch (e) {\n    // eval not allowed due to CSP\n    evalError = e && e.message ? e.message : 'unknown reason';\n  }\n\n  // TODO: dont use eval to update methods. see #1273\n  // RHL needs setPrototypeOf to operate Component inheritance, and eval to patch methods\n  var jsFeaturesPresent = !!Object.setPrototypeOf;\n\n  if (!jsFeaturesPresent || !evalAllowed) {\n    // we are not in prod mode, but RHL could not be activated\n    console.warn(\n      'React-Hot-Loader is not supported in this environment:',\n      [\n        !jsFeaturesPresent && \"some JS features are missing\",\n        !evalAllowed && \"`eval` is not allowed(\" + evalError + \")\"\n      ].join(','),\n      '.'\n    );\n    module.exports = require('./dist/react-hot-loader.production.min.js');\n  } else {\n    module.exports = window.reactHotLoaderGlobal = require('./dist/react-hot-loader.development.js');\n  }\n}\n","\"use strict\";function _interopDefault(e){return e&&\"object\"==typeof e&&\"default\"in e?e.default:e}Object.defineProperty(exports,\"__esModule\",{value:!0});var React=_interopDefault(require(\"react\"));function AppContainer(e){return AppContainer.warnAboutHMRDisabled&&(AppContainer.warnAboutHMRDisabled=!0,console.error(\"React-Hot-Loader: misconfiguration detected, using production version in non-production environment.\"),console.error(\"React-Hot-Loader: Hot Module Replacement is not enabled.\")),React.Children.only(e.children)}AppContainer.warnAboutHMRDisabled=!1;var hot=function e(){return e.shouldWrapWithAppContainer?function(e){return function(n){return React.createElement(AppContainer,null,React.createElement(e,n))}}:function(e){return e}};hot.shouldWrapWithAppContainer=!1;var areComponentsEqual=function(e,n){return e===n},setConfig=function(){},cold=function(e){return e},configureComponent=function(){};exports.AppContainer=AppContainer,exports.hot=hot,exports.areComponentsEqual=areComponentsEqual,exports.setConfig=setConfig,exports.cold=cold,exports.configureComponent=configureComponent;\n","import React, { FC, useState } from 'react';\nimport CurrencyInput from '../components/CurrencyInput';\nimport { CurrencyInputProps } from '../components/CurrencyInputProps';\n\nconst options: ReadonlyArray<CurrencyInputProps['intlConfig']> = [\n  {\n    locale: 'de-DE',\n    currency: 'EUR',\n  },\n  {\n    locale: 'en-US',\n    currency: 'USD',\n  },\n  {\n    locale: 'en-GB',\n    currency: 'GBP',\n  },\n  {\n    locale: 'ja-JP',\n    currency: 'JPY',\n  },\n  {\n    locale: 'en-IN',\n    currency: 'INR',\n  },\n];\n\nexport const Example3: FC = () => {\n  const [intlConfig, setIntlConfig] = useState<CurrencyInputProps['intlConfig']>(options[0]);\n  const [value, setValue] = useState<string | undefined>('123');\n  const [rawValue, setRawValue] = useState<string | undefined>(' ');\n\n  const handleOnValueChange = (value: string | undefined): void => {\n    setRawValue(value === undefined ? 'undefined' : value || ' ');\n    setValue(value);\n  };\n\n  const handleIntlSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const config = options[Number(event.target.value)];\n    if (config) {\n      setIntlConfig(config);\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-12 mb-4\">\n        <a href=\"https://github.com/cchanxzy/react-currency-input-field/blob/master/src/examples/Example3.tsx\">\n          <h2>Example 3</h2>\n        </a>\n        <ul>\n          <li>Intl config</li>\n        </ul>\n\n        <div className=\"row\"></div>\n\n        <div className=\"row\">\n          <div className=\"form-group col\">\n            <div className=\"row\">\n              <div className=\"col-12\">\n                <CurrencyInput\n                  id=\"validationCustom04\"\n                  name=\"input-1\"\n                  intlConfig={intlConfig}\n                  className={`form-control`}\n                  onValueChange={handleOnValueChange}\n                  decimalsLimit={6}\n                  value={value}\n                  step={1}\n                />\n              </div>\n              <div className=\"col-12 mt-3\">\n                <label htmlFor=\"intlConfigSelect\">Intl option</label>\n                <select className=\"form-control\" id=\"intlConfigSelect\" onChange={handleIntlSelect}>\n                  {options.map((config, i) => {\n                    if (config) {\n                      const { locale, currency } = config;\n                      return (\n                        <option key={`${locale}${currency}`} value={i}>\n                          {locale}\n                        </option>\n                      );\n                    }\n                  })}\n                </select>\n              </div>\n            </div>\n          </div>\n          <div className=\"form-group col\">\n            <pre className=\"h-100 p-3 bg-dark text-white\">\n              <div className=\"row\">\n                <div className=\"col-12\">\n                  <div className=\"text-muted mr-3\">onValueChange:</div>\n                  {rawValue}\n                  <div className=\"text-muted mr-3 mt-3\">intlConfig:</div>\n                  {JSON.stringify(intlConfig)}\n                </div>\n              </div>\n            </pre>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Example3;\n","import React, { FC, useReducer } from 'react';\nimport CurrencyInput, { formatValue } from '..';\n\ntype Field = {\n  value: number | undefined;\n  validationClass: string;\n  errorMessage: string;\n};\n\ntype ExampleState = {\n  field1: Field;\n  field2: Field;\n};\n\ntype Action = {\n  fieldName: string;\n  value: Field;\n};\n\nfunction reducer(state: ExampleState, { fieldName, value }: Action): ExampleState {\n  return {\n    ...state,\n    [fieldName]: value,\n  };\n}\n\nconst initialState: ExampleState = {\n  field1: {\n    value: 100,\n    validationClass: '',\n    errorMessage: '',\n  },\n  field2: {\n    value: 200,\n    validationClass: '',\n    errorMessage: '',\n  },\n};\n\nexport const Example4: FC = () => {\n  const prefix = '£';\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const handleOnValueChange = (_value: string | undefined, fieldName: string | undefined): void => {\n    if (!fieldName) {\n      return;\n    }\n\n    if (!_value) {\n      return dispatch({\n        fieldName,\n        value: {\n          value: undefined,\n          validationClass: '',\n          errorMessage: '',\n        },\n      });\n    }\n\n    const value = Number(_value);\n\n    if (!Number.isNaN(value)) {\n      dispatch({\n        fieldName,\n        value: {\n          value,\n          validationClass: 'is-valid',\n          errorMessage: '',\n        },\n      });\n    } else {\n      dispatch({\n        fieldName,\n        value: {\n          value,\n          validationClass: 'is-invalid',\n          errorMessage: 'Please enter a valid number',\n        },\n      });\n    }\n  };\n\n  const total = (state.field1.value || 0) + (state.field2.value || 0);\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-12 mb-4\">\n        <a href=\"https://github.com/cchanxzy/react-currency-input-field/blob/master/src/examples/Example4.tsx\">\n          <h2>Example 4</h2>\n        </a>\n        <ul>\n          <li>Add two values together</li>\n          <li>Format the total value</li>\n        </ul>\n\n        <form className=\"needs-validation\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <label htmlFor=\"validation-example-3-field1\">Value 1</label>\n              <CurrencyInput\n                id=\"validation-example-3-field1\"\n                name=\"field1\"\n                className={`form-control ${state.field1.validationClass}`}\n                value={state.field1.value}\n                onValueChange={handleOnValueChange}\n                prefix={prefix}\n              />\n              <div className=\"invalid-feedback\">{state.field1.errorMessage}</div>\n            </div>\n\n            <div className=\"col\">\n              <label htmlFor=\"validation-example-3-field2\">Value 2</label>\n              <CurrencyInput\n                id=\"validation-example-3-field2\"\n                name=\"field2\"\n                className={`form-control ${state.field2.validationClass}`}\n                value={state.field2.value}\n                onValueChange={handleOnValueChange}\n                prefix={prefix}\n              />\n              <div className=\"invalid-feedback\">{state.field1.errorMessage}</div>\n            </div>\n\n            <div className=\"col\">\n              <div className=\"\">\n                <label>Total:</label>\n                <div className=\"h3\">{formatValue({ prefix, value: String(total) })}</div>\n              </div>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Example4;\n","import CurrencyInput from './components/CurrencyInput';\n\nexport default CurrencyInput;\nexport { formatValue } from './components/utils/formatValue';\n","import React, { FC, useState } from 'react';\nimport { formatValue } from '../components/utils';\n\nconst FormatValuesExample: FC = () => {\n  const [value, setValue] = useState('123456789.999');\n  const [prefix, setPrefix] = useState('$');\n  const [groupSeparator, setGroupSeparator] = useState(',');\n  const [decimalSeparator, setDecimalSeparator] = useState('.');\n  const [disableGroupSeparators, setdisableGroupSeparators] = useState(false);\n\n  const handleValueChange = ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(value);\n  };\n\n  const handlePrefixChange = ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\n    setPrefix(value);\n  };\n\n  const handleGroupSeparatorChange = ({\n    target: { value },\n  }: React.ChangeEvent<HTMLInputElement>) => {\n    setGroupSeparator(value);\n  };\n\n  const handleDecimalSeparatorChange = ({\n    target: { value: newDecimalSeparator },\n  }: React.ChangeEvent<HTMLInputElement>) => {\n    setDecimalSeparator(newDecimalSeparator);\n  };\n\n  const handleTurnOffSeparatorChange = ({\n    target: { value },\n  }: React.ChangeEvent<HTMLInputElement>) => {\n    setdisableGroupSeparators(value === 'true' ? true : false);\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-12 mb-4\">\n        <a href=\"https://github.com/cchanxzy/react-currency-input-field/blob/master/src/examples/FormatValuesExample.tsx\">\n          <h2>Format values example</h2>\n        </a>\n        <ul>\n          <li>Use the `formatValue` function convert a value to a user friendly string</li>\n        </ul>\n        <div className=\"col-10\">\n          <div className=\"row mt-3\">\n            <div className=\"col\">\n              <label>Value (Number only)</label>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                value={value}\n                onChange={handleValueChange}\n              />\n            </div>\n            <div className=\"col-3\">\n              <label>Prefix</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                value={prefix}\n                onChange={handlePrefixChange}\n              />\n            </div>\n            <div className=\"col-3\">\n              <label>Group Separator</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                value={groupSeparator}\n                onChange={handleGroupSeparatorChange}\n              />\n            </div>\n            <div className=\"col-3\">\n              <label>Decimal Separator</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                value={decimalSeparator}\n                onChange={handleDecimalSeparatorChange}\n              />\n            </div>\n          </div>\n          <div className=\"row mt-3\">\n            <div className=\"col mt-3\">\n              Turn off separators:\n              <div className=\"ml-3 custom-control custom-radio custom-control-inline\">\n                <input\n                  type=\"radio\"\n                  id=\"disableGroupSeparatorsTrue\"\n                  className=\"custom-control-input\"\n                  value=\"true\"\n                  onChange={handleTurnOffSeparatorChange}\n                  checked={disableGroupSeparators}\n                />\n                <label className=\"custom-control-label\" htmlFor=\"disableGroupSeparatorsTrue\">\n                  True\n                </label>\n              </div>\n              <div className=\"custom-control custom-radio custom-control-inline\">\n                <input\n                  type=\"radio\"\n                  id=\"disableGroupSeparatorsFalse\"\n                  className=\"custom-control-input\"\n                  value=\"false\"\n                  onChange={handleTurnOffSeparatorChange}\n                  checked={disableGroupSeparators === false}\n                />\n                <label className=\"custom-control-label\" htmlFor=\"disableGroupSeparatorsFalse\">\n                  False\n                </label>\n              </div>\n            </div>\n          </div>\n          <div className=\"mt-5\">\n            Formatted value:\n            <div className=\"display-4\">\n              {formatValue({\n                value,\n                groupSeparator,\n                decimalSeparator,\n                disableGroupSeparators,\n                prefix,\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FormatValuesExample;\n"],"sourceRoot":""}